day04=========================================
JAVA, DBMS, HTML, CSS, JavaScript(놀랍게도 자바와는 관련이 없다. 햄과 햄스터와 같은 관계), jQuery, Jsp, Spring, C
=>JAVA,  Jsp, Spring 위주로 갈거.(백엔드)
=> 그다음 DBMS. 아주 영역이 넓음...(DBA라는 직군이 따로 있을정도로)
책을 사는것은 이 4가지.

네이버, 카카오톡, 라인, 쿠팡, 배민, 직방, 당근마켓, 토스-> 우리나라 유명 it기업 네카라쿠배직당토

http://www.acmicpc.net/ 백준닷컴 문제은행(기초).
http://programmers.co.kr 프로그래머스(하드).

==============================================
1. 반복문
  1-1. for문
    - for문은 사람이 직접 처리하기에 부담스러운 반복적인 작업을 처리하기에 매우 용이하다.
[그림추가]
    - (1) : 초기식, 최초로 초기식을 설정한다.
    - (2) : 조건식, (T/F) 초기식을 설정한 다음에는 조건식을 판단한다.
    - (3) : 만약 조건식이 참이라면 반복적으로 동작할 구문을 1회 수행한다.
    - (4) : 반복 구문을 수행한 후, 증감식으로 이동한다.     - (5) : 증감식을 수행한 후, 다시 조건식으로 이동한다. 여전히 조건식이 참이라면 반복 수행을 처리하고, 그렇지 않다면 for문을 종료한다. 

	for((1)초기식; (2,5)조건식; (4)증감식) {
		(3)... 반복적으로 동작할 구문..
	}

  [for문 예제 그림]


for 문 11시 수업 앞쪽 영상녹화 놓침...


  1-2. while문
    - while문 역시 for 문과 마찬가지로 반복적인 처리를 수행하는 문법이다.
    -  for 문은 초기식, 조건식, 증감식을 모드 내장하는 반면, while 문은 조건식만을 내장하기 때문에, 초기식과 증감식을 외부에 따로 정의해 주어야 한다.

[while문 예제 그림]


  1-3. do~while 문
    - 조건의 판별을 나중에 수행하는 반복문 형태
    - 초기식을 설정한 후 do{...} 안의 문장을 우선적으로 1회 실행하고 조건을 판별하므로 조건이 참이 아니더라도 최소 1회는 실행된다.


-> 정보 처리 기사 시험등에서 가끔 나옴
[사진 자료 참고]




====> while 문과 do-while의 차이
loop_Main07
while은 조건이 충족되어야 실행이 되는데, do-while은 문법의 특징상 T/F이건 간에 1번은 무조건 실행이 된다.
***while/do-while 일할때는 잘 안쓰인다고 함;



  1-4. 무한루프
loop_Main08,09

    - 중감식이 설정되지 않거나, 증감식이 수행되더라도 조건식이 거짓이 되지 않는 형태
    - 반복문이 도는데 무한이 돔(거짓이 되는 조건이 없다는거).
    - 버그 종류중 한개, 말도 안되는 버그임. 제일 발생해선 안되는 버그. 개발과정에서는 있을 수 있으나 사람들한테 배포하거나 할때 절대 있어서는 안되는 버그.
    - 조건식이 항상 참이므로, 반복문이 종료되지 않는다.
    - 프로그램의 PC자원을 매우 많이 사용하게 되므로, 시스템 다운을 발생시킬 수 있다.
    - while문의 무한루프 예

	while( true ) { 
		System.out.println("Hello");
	}

    - for문의 무한 루프 예
	for( int i = 0; i<10; i--) {
		System.out.println("Hello");
		System.out.println(i);
	}

=> 정지 시킬려면 빨간색 stop 버튼을 누르고, 회색 엑스 2개 되어있는거 사라질때까지 누르면 됨.


2. 변수의 범위 (=변수의 스코프)
  2-1. 자신보다 하위 브록으로는 침투 할 수 있다. (true)
    - 유효한 범위인지 아닌지 맞추어 보기

	int num = 100;
	if( num == 100){
		System.out.println(num);
	}
[사용할 수 있음]


	int num = 100;
	for( int i = 0; i < 10; i++) {
		System.out.println(num + i);
	}

[사용 할 수 있음]




  2-2. 자신이 선언된 블록 밖으로는 빠져나갈 수 없다. (true)
    - 허용이 되는지 맞춰보기

	int num = 100;
	if( num == 100) {
		int result = num + 100;
	}
	System.out.println(result);

[에러남, 사용불가]
블록 안에 변수이기에 블록을 빠져나오면 에러가 남.

	for( int i = 0; i<10; i++) {
		...
	}

	System.out.println(i);


[에러남, 사용못함]
for문 괄호 안에서 사용한것이므로 사용 불가. 

선생님 답.
=> 변수 result가 if 블록 안에서 생성되었으므로 사용 불가
=> i 가 for 문을 위한 괄호 안에서 사용되었으므로 사용불가.


  2-3. 블록안에서 선언된 변수는 블록 밖에서 존재하는 동일한 이름의 변수와는 이름만 동일할 뿐, 다른 값으로 인식된다.
** 4시강의 30분정도 때 다시 들어보기
    	- 사용가능
	int target = 100;
	if( target == 100) { 
		int num = target + 100;
	} else {
		int num = target - 100;
	}


	- 불가능
	int target = 100;
	int num = 50;
	if( target == 100) { 
		int num = target + 100;
	} else {
		int num = target - 100;
	}
=> 타겟은 선언 후에 재할당이기 때문에 문제 없음.
int num 의 경우는 계속 선언하고 있는것이기 대문에 에러,
위의 문장의 경우, if 문 내부의 int num 에서 선언(int)를 지우면 사용 가능.


[그림참고] 반복문은 지들끼리 중첩 사용이 가능하다(문법상) 

































