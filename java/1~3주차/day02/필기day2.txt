Day2========================================================
1. 변수
  1-1. 문자열 데이터
	(배포 이미지참고)
    - 참조변수
    - 프로그램 코드에서 "문장"을 표현하기 위해 사용되는 데이터 값.

  1-2. String
    - 문자열을 표현하기 위한 자료형이다.(첫글자 대문자 주의
    - 글자수에 상관없이 쌍따옴표("")로 묶인 내용을 할당할 수 있다.
    - 숫자값의 경우 쌍따옴표로 묶이게 되면 문자열로 취급되므로, 숫자와 문자열을 분명하게 구별해야 한다.

  1-3. 변수의 사용 방법
    - 변수를 사용하는 방법은 "선언"과 "할당" 두 영역으로 구분된다.
    - 변수의 선언
	-> 선은 대이터 형과 사용하고자 하는 변수의 이름을 자정한 후, 세미콜론(;)으로 한 라인을 종료합니다.

	데이터형 변수이름;
	int num1;

    - 변수의 할당
	-> 선언된 변수에 원하는 값을 대입하는 과정을 의미한다. 
	값의 대입은 대입 연산자("=")를 사용하여, 우변에서 좌변으로 대입한다.

	변수이름 = 값;
	num1 = 100;

    - 선언과 할당의 통합
	데이터형 변수이름 = 값;
	int num1 = 100;

  1-4. 문자열 데이터
    - String 형의 변수를 선언하고, 쌍 따옴표로 묶인 값을 대입한다.
    - 빈 문자열이나 공백도 문자열 데이터이다.
*** String을 이해하기 위해선 null; 을 이해해야 한다고 함.

	String msg = "  안녕하세요. 자바  ";
	-> 문장을 표현, 공백 포함

	String blank = "";
	-> 빈 문자열 값 가능

	String age = "25";
	-> 숫자값이 쌍따옴표로 묶였다면 문자열이다.

- 짝코딩 (사수와 부사수가 짝이되어 코딩을 해보는)


    - 문자열 데이터의 덧샘
	-> 문자열 + 문자열 : 두 문장을 하나로 합쳐준다.

	String language = "JAVA";
	String language = "JA" + "VA";

    - 문자열 + 기본 자료형

	int age = 20;
	String name = "자바학생";
	String result = name + age; -> "자바학생" + 20 -> "자바학생20"


  1-5. 변수 이름 명명 규칙
    - 변수 이름은 영문, 숫자, "_", "$"(달러는 잘 안사용함)만 사용 가능하다.
    - 변수 이름의 첫 글자는 숫자로 시작될 수 없다.
    - 대/소문자를 엄격하게 구별하므로 오타에 주의!(아예 다른 변수로 취급함)
    - 자바에서 사용하는 예약어(키워드)를 사용할 수 없다. (예를들어 int를 변수이름으로 사용하지 못한다는것)

    - ex1) (1) myName, (2) myname, (3) my_name 
-> 예약어랑 겹칠 수있기 때문에 my 를 붙였구나! 
-> 1번, 2번, 3번중 제일 좋은 변수 선언방법은 무엇인가? 
답 : 1번 또는 3번. 2번은 가장 안좋은데 이유는 가독성이 매우 떨어지기 때문에. 단 1번으로 하던 3번으로 하던 통일성을 주어야 한다.
    - ex2) my_phone, userInput, userPassword

    - 클래스의 이름의 명명 규칙도 변수 이름의 규칙과 동일하다. (ex. int)

  1-6. 값의 할당 방법
    - boolean은 true(참), false(거짓) 중 한 가지만 갖는다.
    - boolean isKorean = ture;
    - boolean isJapanes = false;

    - char는 홑따옴표(')로 감싸진 한 글자만 대입할 수 있다.
    - char first = '곽'; (개발할때 쓸일이 그렇게 많지 않음)

    - long, float, double은 다른 데이터 형과의 구별을 위해 값 뒤에 데이터 형의 첫 글자를 접미사로 가질 수 있다. 접미사는 대/소문자를 가리지 않지만 가급적 대문자르 사용하는 것이 좋다.
    - long money = 5000000000L;
    - float PI = 3.14ㄹ;
    - double lat = 128.32452D;

    - 생선된 변수는 다른 변수에 대입될 수 있다.
    - int num1 = 100;
    - int num2 = num1;

  1-7. 변수 사용의 제약
    - 반복하여 다름 값이 할당 될 수 있지만. 선언은 중복이 불가능하다.
    - int num1 = 100;
       num1 = 200; -> 에러 안남
       num1 = 300; -> 에러 안남
       int num1 = 400; -> 에러남, 이미 선언된 변수이므로 에러남.


    - 선언되지 않는 변수는 사용 할 수 없다.
    -(1) int num1 = 100; -> 에러안남
      (2) num1 = 200; -> 재할당, 에러 안남
      (3) num2 = 300; -> 선언되지 않았기에 에러남.


    - 값이 대입되지 않은 변수는 다른 변수에 대입하거나 출력할 수 없다.
    - (1) int num1; -> 에러 안남(선언만 하는것, 문제 없음)
       (2) int num2 = num1; (선언과 동시에 할당을 해줄려고 하는데, 할당되어 있지 않는 변수를 가지고 num2에 할당을 하려고 했으므로 에러가 발생,)
       (3) System.out.println(num1);
	
->(2)를 주석처리 했다고 했을때, 에러가 날까? (3번이 2번으로)
에러가 바로 남, 할당되지 않은 변수를 출력하였으므로 에러!



*** 빨간색은 에러
*** 노란색은 경고(워닝)
	무시, 변수 선언만 되어있고 실질적으로 사용 안했음. (너 이거 안쓰는건데 사용하는거 맞아? 라고 물어보는거, 사용 못하는건 아닌데 최적화(클린) 된게 아닌거. 시간 나면 반드시 확인해볼것!)
	



  1-8. 상수
    - 변하지 않는 수
    - 변수와 마찬가지로 메모리상에 존재하지만, 값이 변경될 수 없는 데이터.
    - final 키워드를 사용하여 선언된 변수는 상수로 생성된다.


	fianl int age = 20;
	final long money = 12000000000L;
	final float PI = 3.14F;

    - 메모리 상에 접근은 가능하지만, 할당한 값을 변경할 수는 없다. (읽기 전용)



2. 연산자
  2-1. 연산자란
    - 대입 연산자
	-> 변수 선언하고 값 할당할때 쓰는 (=), 변수에 숫자나 문자열 등의 자료를 입력하거나 연산 결과를 다른 변수에 할당한다.
    - 사칙 연산자
	-> 더하기(+), 빼기(-), 곱하기(*), 나눗셈의 몫(/), 나머지(%)
    - 단항 연산자
	-> 변수에 대한 연산 결과를 다시 자기 자신에게 적용하는 경우 사용한다.
    - 증감 연산자
	-> 특정 변수에 저장되어 있는 값을 1씩 증가, 감소 시킬 경우 사용한다.
    - 비교 연산자
	-> 두 개의 변수값 간의 관계를 비교하고 참(true), 거짓(false)의 결과를 반환한다.
    - 논리 연산자
	-> 좌변과 우변을 논리연산하고, 참일때는 true, 거짓일때는 false값을 반환한다.


  2-3. 사칙 연산자
    - 일반적인 덧셈(+), 뺄셈(-), 곱셈(*), 나눗셈(/,%)을 수행한다.
    - 사칙연산의 결과는 대입 연산자를 통하여 다른 변수에 대입될 수있다.

	int num1 = 10 - 5;

    - 정수 (byte, short, int, long)와 실수(float, double)의 연산시에는 정수가 실수의 형태로 자동 변환되어 처리되기 때문에, 결과는 실수가 된다. (형변환 파트에서 더 자세히 배울것)
    - 나눗셈에 있어서의 주의사항
	-> 10 나누기 3을 할때, 몫 3, 나머지가 1 계산 되어지지만, 나눗셈에 대한 두개의 연산자로 구분된다.
	-> 10/3 : 나눗셈의 몫만을 취하여 결과값은 "3"
	-> 10%3 : 나눗셈의 나머지만을 취하여 결과값은 "1"이 된다.
	->*** 모든 수는 0으로 나눌 수 없다. (오류)

    - 연산자 우선순위
	-> 곱셈(*) 과 나눗셈(/,%)은 덧셈(+)과 뺄셈(-)보다 우선한다.
	-> 여러 연산자를 복합적으로 사용할 경우, 괄호로 묶여 있는 곳이 우선한다.

	-> 3 + 5 / (10 - 5)
	-> 3 + 5 / 5
	-> 3 + 1
	-> 4

============블로그 작성해보기=================
- 블로그를 해보는것이 기록, 포트폴리오의 일종이 될 수있다.
- 블로그 만들때는 표, 그림을 통해 보기 임펙트있고 편안하게 볼 수 있음(가독성이 좋아짐)
- ex) 마켓컬리 등
> https://brunch.co.kr/@sicle-official/35
> https://helloworld.kurly.com/blog/vsms-performance-experiment/

==============================================



  2-4. 단항연산자
*** operator 폴더에 Main03에 해당.

    -  어떤 변수 (x)의 값에 대한 계산 결과를 다시 자기 자신에게 대입하고자 하는 경우의 약식 표현이다.

	int x = 100;
	x = x + 5;


	연산에 대한 결과값 105, 다시 재할당을 시켜
	x = 105가 됨.

        ->단항연산자
	int x = 100;
	x += 5;
	위의 예와 같은 결과가 나옴.

    - 단항연산자는 모든 사칙연산자에 표현 가능하다
	-> +=, -=, *=, /=, %=
============풀어보기================
int source = 100;
source += 100; // source = source + 100;
source -= 50;  // source = source - 50;		
source *= 2;   // source = source * 2;
source /= 100; // source = source / 100
source %= 2;   // source = source % 2

System.out.println("source : " + source);.

====================================

  2-5. 증감연산자
    -  단항 연산자로 표현할 수 있는 식에서 계산 대상 값이 1인 경우, 덧셈과 뺄셈에 대해서는 다시 한번 축약 할 수 있다.

    - 덧셈의 경우
	x = x+1;
	x += 1;
	x++;
	++x;


    - 뺄셈의 경우
	x = x-1;
	x -= 1;
	x--;
	--x;
	 
	사용빈도 밑으로 갈수록 많음/


    - 덧/ 뺄셈 연산자의 위치차이에 따라 달라지는데
    - "x++"와 "++x" 의 차이
	-> 증감 연산자는 그 자체가 다른 연산식의 피연산자로 사용될 수 있다.
이때, 증감 연산자의 표시 위치에 따라 결과가 서로 다르게 적용된다.

    - x++
	-> 증감 연산자가 뒤에 표시되는 경우, 
현재 x의 값을 먼저 수식에 적용하고, 나중에 x에 대한 1증가 처리를 한다.

	int a = 100;
	int x = 1;
	int y = a + x++

	y : 101 
	x : 2

-> 어느 시점에 증가 되는가에 따른 차이.

***반복문항쯤 갈때 사용함.


    -  ++x
	-> 증감연산자가 앞에 표시되는 경우, 먼저 현재 x의 값을 1 증가시킨후, 그 결과를 수식에 적용한다.

	int a = 100;
	int x = 1;
	int y = a + ++x;

	y : 102
	x : 2


  2-6. 비교연산자
    - 같다, 다르다, 크다(초과), 크거나 같다(이상), 작다(미만), 작거나 같다(이하) 에 대한 비교를 수행하는 연산자

	같다	==
	다르다	!=
	초과	>
	이상	>=
	미만	<
	이하	<=


    -  주어진 식이 참인지 거짓인지만 판별 가능하므로, 연산 결과는 boolean 값으로 생성된다.

	int x = 100;
	int y = 1;
	boolean result = x != y;
		(true)



다음주 논리연산자부터.

























