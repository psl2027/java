day17----------------------------------------------------------------------
1. 예외처리
 1-1. 에러의 종류
   - 컴파일 에러
	:아예 실행이 안됨
	-> 소스코드의 구문 오류로 인하여 컴파일이 불가능한 상태
	-> 이클립스에서 빨간색으로 표시되는 경우에 해당한다.
	-> 프로그램을 실행하기 전에 발견되므로 상대적으로 고치기가 쉽다.

   - 런타임 에러
	-> 구문상의 에러는 없지만, 프로그램이 실행되는 과정에서 다양한 경우의 수에 대응하지 못하여 발생하는 예외상황
	-> 런타임 에러가 발생하면 프로그램은 강제로 종료된다.
	-> 우리가 프로그램의 에러라고 부르는 현상은 대부분 런타임 에러에 해당한다.
	
 1-2. 런타임 에러의 종류
   - 런타임 에러는 프로그램 자체의 구조적인 문제로 인한 논리적 오류와 자바 가상머신 자체의 문제로 인한 오류, 그리고 예외가 있다.
   - 논리 오류
	-> 논리적 모순이 생기지 않도록 코드를 작성해야 한다.
   - 자바 가상머신 자체의 오류
	-> 프로그래머가 책임질 수 있는 수준의 오류가 아니다.
   - 예외( Exception )
	-> 프로그램 실행 중에 발생할 수 있는 예기치 않은 사건으로,
	프로그래머의 노력으로 처리할 수 있다.
	-> 자바 가상 머신은 프로그램 실행중에 예외가 발생하면
	관련된 예외 클래스로부터 예외 객체를 생성하여 프로그램에서 지정	된 예외처리 구문으로 넘긴다.
	-> 예외가 발생하면 프로그램에 지정된 예외 처리 구문이 자바  가상	머신에 의해 호출되고, 이때 전달되는 예외 객체를 넘겨받아 적절한 	처리를 수행한다.

 1-3. java의 예외처리
   - java 에서는 try ~ catch ~ finally 구문을 통해 프로그래머가 예외 상황에 대응할 수 있도록 하고 있다.

	try {
		// 기본적으로 실행되는 부분	
	} catch( 예외클래스이름 객체이름 ) {
		// try 블록에서 예외가 발생한 경우 이 곳으로 제어가 넘	어온다. 
	} finally {
		// 예외상황의 발생 여부에 상관 없이 무조건 실행되는 부		분
		// finally 블록은 생략 가능하다.
	}

   - try 블록 실행도중 catch 에서 명시한 예외 클래스에 해당하는 런타임 에러가 발생하면, try 블록을 즉시 중단하고 catch 블록이 실행 된 후, finally 블록이 실행된다.
   - 예외가 발생하지 않을 경우에는 try 블록 종료 후 finally 블록이 실행된다.
Main03	NumberFormatException vs IndexOutOfBoundsException 



잠깰겸 이야기
JD란? Job Description = 직무 기술
-> 당장에 이직이나 취업생각이 없더라도, jd를 보면 기업들이 현재 원하는 인재상, 필요한 능력을 알 수 있다.

PM이란?
잡플래닛 : https://www.jobplanet.co.kr/job
***크래딧잡 : https://kreditjob.com/
*****원티드 : https://www.wanted.co.kr/
블라인드 : https://www.teamblind.com/kr/


 1-4. catch 블록을 사용한 복잡한 에러처리
   - catch블록은 에러가 예상되는 상황에 대해 복수로 명시하는것이 가능하다.
	
	try {
	} catch( NumberFormatException e ) {
	} catch( ArrayIndexOutOfBoundsException e ) {
	}


 1-5.Exception 클래스
   - Java에서 예외 상황을 의미하는 모든 클래스들의 최상위 클래스
   - 이 클래스의 이름으로 catch 블록을 구성하면, 모든 예외 상황에 일괄적으로 대응할 수는 있지만, catch블록이 세분화된 경우와는 달리 상황별 개별적인 처리는 불가능하다.
   - Exception 클래스에 대한 예외처리는 대부분 맨 마지막 catch블록에 명시하여 '마지막 알 수 없는 에러'를 의미하도록 구성한다.



sample Main05
	try {
	} catch( NumberFormatException e ) {
	} catch( ArrayIndexOutOfBoundsException e ) {
	} catch( Exception e) {
	}

 1-6. 여러 객체 'e'의 기능
Main05
   - e.getMessage()
	-> 간략한 에러 메시지를 리턴한다.
	-> e.getLocalisMeassage()도 같은 기능을 한다.
   - e.pringStackTrace()
	-> 실제 예외 상황시에 출력되는 메시지를 강제로 출력한다.
	-> 개발자가 catch블록 안에서 예외상황을 분석하기 위한 용도로 사		용한다.

  -> 이 Exception 이 다른 구문에 비해 위로 올라가버리면 및에 NumberFor..., 이나 ArrayIndex..., 구문에 오류가 뜸, 앞에서 최상위 포멧으로써 모든 예외를 잡아버리기 때문에 나머지를 오류 띄어버림. 때문에 Exception의 위치는 제~~일 마지막이 되어야 함.

사용 ex) ID, Password 로그인시 둘다 찾기위해.

--> id 또는 패스워드가 잘못됏습니다. 라고 뭉등그려 알려주는 이유 2시 41분쯤



2. Calendar Class



























